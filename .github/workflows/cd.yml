name: Build and Push

# 必要な権限を明示的に設定
# contents: read - リポジトリの読み取り権限
# packages: write - パッケージの書き込み権限（Dockerイメージのプッシュに必要）
# security-events: write - セキュリティスキャン結果のアップロードに必要
permissions:
  contents: read
  packages: write
  security-events: write

# メインブランチへのプッシュとバージョンタグの作成時に実行
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.repository_owner }}

jobs:
  # Docker Composeファイルの検証
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Validate docker compose file
        run: docker compose -f deployments/docker/production/docker-compose.yml config

  # セキュリティスキャンの実行
  security-scan:
    needs: validate # validateジョブの完了を待機
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH" # 重大度が高い脆弱性のみを検出
          ignore-unfixed: true # 修正されていない脆弱性を無視

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Dockerイメージのビルドとプッシュ
  build-and-push:
    needs: validate # validateジョブの完了を待機
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Dockerイメージのメタデータを抽出
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/university-entrance-exam-subject-navi
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/university-entrance-exam-subject-navi-front
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      # Dockerイメージのビルドとプッシュ
      - name: Build and push backend
        uses: docker/bake-action@v6
        with:
          files: |
            ./back/docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: app
          set: |
            *.tags=${{ steps.meta.outputs.tags }}
            *.labels=${{ steps.meta.outputs.labels }}

      - name: Build and push frontend
        uses: docker/bake-action@v6
        with:
          files: |
            ./front/docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: app
          set: |
            *.tags=${{ steps.meta.outputs.tags }}
            *.labels=${{ steps.meta.outputs.labels }}

  # 本番環境へのデプロイ
  deploy:
    needs: build-and-push # build-and-pushジョブの完了を待機
    if: startsWith(github.ref, 'refs/tags/v') # バージョンタグが付いている場合のみ実行
    runs-on: ubuntu-latest
    concurrency: deployment # 同時実行を制限（同じデプロイが同時に実行されないように）
    steps:
      # SSHキーの設定
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # 既知のホストの追加
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      # 本番環境へのデプロイ実行
      - name: Deploy to production
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          docker compose -f deployments/docker/production/docker-compose.yml pull  # 最新のイメージを取得
          docker compose -f deployments/docker/production/docker-compose.yml up -d  # コンテナを更新
          docker system prune -f  # 未使用のDockerリソースをクリーンアップ
