name: Continuous Deployment

# 必要な権限を明示的に設定
# contents: read - リポジトリの読み取り権限
# packages: write - パッケージの書き込み権限（Dockerイメージのプッシュに必要）
# security-events: write - セキュリティスキャン結果のアップロードに必要
permissions:
  contents: read
  packages: write
  security-events: write

# メインブランチへのプッシュとバージョンタグの作成時に実行
on:
  push:
    branches: [main]
    tags: ["v*"] # v1.0.0のようなバージョンタグ
    paths:
      - "back/**"
      - "front/**"
      - "deployments/docker/**"
      - ".github/workflows/cd.yml"

# 環境変数の設定
env:
  PRODUCTION_READY: false # 本番環境の準備状態を示すフラグ
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Docker Composeファイルの検証
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Validate docker compose file
        run: docker compose -f deployments/docker/production/docker-compose.yml config

  # セキュリティスキャンの実行
  security-scan:
    needs: validate # validateジョブの完了を待機
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH" # 重大度が高い脆弱性のみを検出
          ignore-unfixed: true # 修正されていない脆弱性を無視
          vuln-type: "os,library" # OSとライブラリの脆弱性をスキャン

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
          category: "security-scan"
          wait-for-processing: true

  # Dockerイメージのビルドとプッシュ
  build-and-push:
    needs: validate # validateジョブの完了を待機
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      # Docker Hubへのログイン
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # GitHub Container Registryへのログイン
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Dockerイメージのメタデータを抽出
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/university-exam-backend
            ghcr.io/${{ github.repository }}/university-exam-frontend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=ref,event=branch
            type=ref,event=pr

      # Dockerイメージのビルドとプッシュ
      - name: Build and push images
        uses: docker/bake-action@v6
        with:
          files: |
            ./back/docker-bake.hcl
            ./front/docker-bake.hcl
          push: true
          targets: app
          set: |
            app.cache-from=type=gha,scope=${{ github.workflow }}-${{ github.ref }}
            app.cache-to=type=gha,mode=max,scope=${{ github.workflow }}-${{ github.ref }}
            app.platform=linux/amd64,linux/arm64
            app.tags=${{ steps.meta.outputs.tags }}
            app.labels=${{ steps.meta.outputs.labels }}

      # メタデータのデバッグ出力
      - name: Debug tags output
        run: echo "${{ steps.meta.outputs.tags }}"

  # 本番環境へのデプロイ
  deploy:
    needs: build-and-push
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
      env.PRODUCTION_READY == 'true' &&
      ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    concurrency: deployment
    environment:
      name: production
    steps:
      - name: Check deployment readiness
        if: env.PRODUCTION_READY != 'true'
        run: |
          echo "本番環境の準備が完了していません。"
          echo "以下の設定が必要です："
          echo "1. 本番サーバーの準備"
          echo "2. デプロイ用SSHキーの設定"
          echo "3. デプロイ先ホストの設定"
          echo "4. デプロイユーザーの設定"
          exit 1

      # SSHキーの設定
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # 既知のホストの追加
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      # デプロイ前のバックアップ
      - name: Backup current deployment
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "docker compose -f deployments/docker/production/docker-compose.yml down && \
             docker system prune -f"

      # 本番環境へのデプロイ実行
      - name: Deploy to production
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          # 最新のイメージを取得
          docker compose -f deployments/docker/production/docker-compose.yml pull

          # コンテナを更新
          docker compose -f deployments/docker/production/docker-compose.yml up -d

          # ヘルスチェック
          echo "ヘルスチェックを開始します..."
          for i in {1..30}; do
            if curl -f http://${{ secrets.DEPLOY_HOST }}/health; then
              echo "デプロイが正常に完了しました"
              exit 0
            fi
            echo "ヘルスチェックを待機中... ($i/30)"
            sleep 10
          done

          echo "ヘルスチェックがタイムアウトしました"
          exit 1

      # ロールバック（デプロイ失敗時）
      - name: Rollback on failure
        if: failure()
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          echo "デプロイに失敗したため、ロールバックを実行します"
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "docker compose -f deployments/docker/production/docker-compose.yml down && \
             docker compose -f deployments/docker/production/docker-compose.yml up -d"
