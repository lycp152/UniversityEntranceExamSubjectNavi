name: Continuous Integration

# 必要な権限を明示的に設定
# contents: read - リポジトリの読み取り権限
# packages: write - パッケージの書き込み権限（Dockerイメージのプッシュに必要）
# security-events: write - セキュリティスキャン結果のアップロードに必要
permissions:
  contents: read
  packages: write
  security-events: write

# 並行実行の制御
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# メインブランチ、開発ブランチへのプッシュ、プルリクエスト、および毎日の定期実行時にトリガー
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 0 * * *" # 毎日午前0時に実行

jobs:
  # キャッシュキーの生成と共有
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - id: cache-key
        run: echo "value=$(date +%s)" >> $GITHUB_OUTPUT

  # コード品質のチェック
  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          check-latest: true
          cache: false
          cache-dependency-path: back/go.sum

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: front/pnpm-lock.yaml

      # Goモジュールのキャッシュ
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('back/go.sum') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('back/go.sum') }}-
            ${{ runner.os }}-go-
          enableCrossOsArchive: true
          fail-on-cache-miss: false

      # pnpmストアのキャッシュ
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            front/node_modules
            front/.next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('front/pnpm-lock.yaml') }}-${{ hashFiles('front/**/*.{js,jsx,ts,tsx}') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ hashFiles('front/pnpm-lock.yaml') }}-
            ${{ runner.os }}-pnpm-
          enableCrossOsArchive: true
          fail-on-cache-miss: false

      # 依存関係のインストール
      - name: Install dependencies
        run: |
          cd back
          go mod download
          go mod verify
          cd ../front
          pnpm install --frozen-lockfile

      # Goのリンター設定
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest
          working-directory: back
          skip-cache: false
          install-mode: binary
          github-token: ${{ secrets.GITHUB_TOKEN }}
          only-new-issues: false
          skip-save-cache: false
          cache-invalidation-interval: 7

      # リンターの実行
      - name: Run linters
        run: |
          cd back
          golangci-lint run --timeout=5m ./...
          cd ../front
          pnpm lint
          pnpm type-check

  # テストの実行
  test:
    needs: lint
    runs-on: ubuntu-latest
    services:
      # テスト用PostgreSQLデータベース
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          cache: false

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: front/pnpm-lock.yaml

      # テスト用のGoモジュールキャッシュ
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ hashFiles('back/go.sum') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-go-test-${{ hashFiles('back/go.sum') }}-
            ${{ runner.os }}-go-

      # バックエンドテストの実行
      - name: Run backend tests
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CSRF_SECRET: ${{ secrets.CSRF_SECRET }}
        run: |
          cd back
          go test -v -race -coverprofile=coverage.txt -covermode=atomic \
            -coverpkg=$(go list ./... | grep -vE 'migrations/scripts|migrations/seeds|internal/testutils|tests/testutils|tests/unit/test_data.go' | paste -sd, -) \
            $(go list ./... | grep -vE 'migrations/scripts|migrations/seeds|internal/testutils|tests/testutils|tests/unit/test_data.go')
          go test -v -bench=. -benchmem ./tests/unit/benchmarks_test.go
          go test -v ./tests/unit/security_test.go
          go test -v -run=TestEdgeCases ./tests/unit/edge_cases_test.go

      # フロントエンドテストの実行
      - name: Run frontend tests
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080/api
        run: |
          cd front
          pnpm install
          export PATH=$PATH:$(pwd)/node_modules/.bin
          pnpm vitest run --coverage

      # カバレッジレポートのアップロード
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./back/coverage.txt,./front/coverage/lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella
          verbose: true
          directory: ./

      # テストレポートの生成
      - name: Generate test report
        run: |
          cd back
          go tool cover -html=coverage.txt -o coverage.html
          go test -json ./... > test-report.json
          # カバレッジ閾値のチェック（80%以上を要求）
          go tool cover -func=coverage.txt | grep -E "total:\s+\(statements\)\s+([0-9.]+)%" | awk '{if ($3 < 80) {print "カバレッジが80%未満です: " $3; exit 1}}'

      # テスト成果物のアップロード
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            back/coverage.html
            back/test-report.json
            front/coverage/lcov-report/index.html

  # パフォーマンステストの実行
  performance:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          cache: false

      # パフォーマンステストの実行と閾値チェック
      - name: Run performance tests
        run: |
          cd back
          echo "パフォーマンステストを開始します..."

          # パフォーマンステストの実行
          echo "負荷テストを実行中..."
          go test -v -run=TestLoad ./tests/unit/load_test.go -bench=. -benchmem > performance.txt
          echo "負荷テストの結果:"
          cat performance.txt

          echo "メモリテストを実行中..."
          go test -v -run=TestMemory ./tests/unit/memory_test.go -bench=. -benchmem > memory.txt
          echo "メモリテストの結果:"
          cat memory.txt

          # パフォーマンス閾値のチェック
          echo "パフォーマンス閾値のチェックを実行中..."
          if grep -q "パフォーマンスが期待値を下回っています" performance.txt; then
            echo "パフォーマンステストが失敗しました"
            exit 1
          fi

          if grep -q "メモリ使用量が期待値を超えています" memory.txt; then
            echo "メモリテストが失敗しました"
            exit 1
          fi

          echo "パフォーマンステストが正常に完了しました"

      # パフォーマンスレポートのアップロード
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            back/performance.txt
            back/memory.txt
          if-no-files-found: error

  # セキュリティテストの実行
  security:
    needs: performance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          cache: false

      # セキュリティテストと脆弱性スキャン
      - name: Run security tests
        run: |
          cd back
          echo "セキュリティテストを開始します..."

          # セキュリティテストの実行
          echo "脆弱性テストを実行中..."
          go test -v -run=TestVulnerability ./tests/unit/vulnerability_test.go > security.txt
          echo "脆弱性テストの結果:"
          cat security.txt

          echo "セキュリティテストを実行中..."
          go test -v -run=TestSecurity ./tests/unit/security_test.go >> security.txt
          echo "セキュリティテストの結果:"
          cat security.txt

          # gosecのインストールと実行
          echo "gosecによる静的解析を実行中..."
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -quiet ./... > vulnerability.txt
          echo "gosecの解析結果:"
          cat vulnerability.txt

          # 依存関係の脆弱性チェック
          echo "依存関係の脆弱性チェックを実行中..."
          go install github.com/google/osv-scanner/cmd/osv-scanner@latest
          osv-scanner . >> vulnerability.txt
          echo "依存関係の脆弱性チェック結果:"
          cat vulnerability.txt

          echo "セキュリティテストが完了しました"

      # セキュリティレポートのアップロード
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            back/security.txt
            back/vulnerability.txt
          if-no-files-found: error

      - name: Run security checks
        run: |
          cd back
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -quiet ./...

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: front/pnpm-lock.yaml

      - name: Install Frontend Dependencies
        run: |
          cd front
          pnpm install --frozen-lockfile

      - name: Run Frontend Security Check
        run: |
          cd front
          pnpm audit

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "UniversityEntranceExamSubjectNavi"
          path: "."
          format: "SARIF"
          out: "./dependency-check-report.sarif"
          args: "--scan front"

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "./dependency-check-report.sarif"
          category: "security"

  # Dockerイメージのビルド
  build:
    needs: security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      # Docker Hubへのログイン
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Dockerイメージのビルド
      - name: Build images
        uses: docker/bake-action@v6
        with:
          files: |
            ./back/docker-bake.hcl
            ./front/docker-bake.hcl
          set: |
            *.cache-from=type=gha,scope=${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
            *.cache-to=type=gha,mode=max,scope=${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
