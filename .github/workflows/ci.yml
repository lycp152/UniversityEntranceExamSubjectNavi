name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 0 * * *" # 毎日実行

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      - id: cache-key
        run: echo "value=$(date +%s)" >> $GITHUB_OUTPUT

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: front/yarn.lock

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.55.2

      - name: Install dependencies
        run: |
          cd back
          go mod download
          cd ../front
          yarn install --frozen-lockfile

      - name: Run linters
        run: |
          cd back
          golangci-lint run ./...
          cd ../front
          yarn lint
          yarn type-check

  test:
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: front/yarn.lock

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run backend tests
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CSRF_SECRET: ${{ secrets.CSRF_SECRET }}
        run: |
          cd back
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go test -v -bench=. -benchmem ./tests/unit/benchmarks_test.go
          go test -v ./tests/unit/security_test.go
          go test -v -run=TestEdgeCases ./tests/unit/edge_cases_test.go

      - name: Run frontend tests
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080
        run: |
          cd front
          yarn vitest run --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./back/coverage.txt,./front/coverage/lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella

      - name: Generate test report
        run: |
          cd back
          go tool cover -html=coverage.txt -o coverage.html
          go test -json ./... > test-report.json
          # カバレッジ閾値のチェック
          go tool cover -func=coverage.txt | grep -E "total:\s+\(statements\)\s+([0-9.]+)%" | awk '{if ($3 < 80) {print "カバレッジが80%未満です: " $3 "%"; exit 1}}'

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            back/coverage.html
            back/test-report.json
            front/coverage/lcov-report/index.html

  performance:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run performance tests
        run: |
          cd back
          go test -v -run=TestLoad ./tests/unit/load_test.go
          go test -v -run=TestMemory ./tests/unit/memory_test.go
          # パフォーマンス閾値のチェック
          go test -v -run=TestLoad ./tests/unit/load_test.go | grep -E "パフォーマンスが期待値を下回っています" && exit 1 || true
          go test -v -run=TestMemory ./tests/unit/memory_test.go | grep -E "メモリ使用量が期待値を超えています" && exit 1 || true

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            back/performance.txt
            back/memory.txt

  security:
    needs: performance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run security tests
        run: |
          cd back
          go test -v -run=TestVulnerability ./tests/unit/vulnerability_test.go
          go test -v -run=TestSecurity ./tests/unit/security_test.go
          # セキュリティスキャン
          go run github.com/securego/gosec/v2/cmd/gosec/... ./...
          # 依存関係の脆弱性チェック
          go list -json -m all | go run github.com/google/osv-scanner/cmd/osv-scanner@latest

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            back/security.txt
            back/vulnerability.txt

  build:
    needs: security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build images
        uses: docker/bake-action@v3
        with:
          files: |
            ./back/docker-bake.hcl
            ./front/docker-bake.hcl
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
