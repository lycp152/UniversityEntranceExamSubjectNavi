name: Security Checks

# トリガー設定
# 1. 毎日0時に定期実行
# 2. main/developブランチへのプッシュ時に実行（特定のファイル変更時のみ）
# 3. main/developブランチへのプルリクエスト時に実行
on:
  schedule:
    - cron: "0 0 * * *" # 毎日実行
  push:
    branches: [main, develop]
    paths:
      - "**.go"
      - "**.ts"
      - "**.tsx"
      - "**/package.json"
      - "**/pnpm-lock.yaml"
      - "**/go.mod"
      - "**/go.sum"
  pull_request:
    branches: [main, develop]

jobs:
  # 依存関係の脆弱性チェック
  dependency-check:
    runs-on: ubuntu-latest
    # セキュリティイベントの書き込み権限を明示的に設定
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      # pnpmのインストール
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      # Node.jsのセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: front/pnpm-lock.yaml

      # フロントエンドの依存関係をインストール
      - name: Install frontend dependencies
        run: |
          cd front
          pnpm install --frozen-lockfile

      # OWASP Dependency-Checkを使用して依存関係の脆弱性をスキャン
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "UniversityEntranceExamSubjectNavi"
          path: "."
          format: "SARIF"
          out: "./dependency-check-report.sarif"
          args: |
            --suppression ./.github/dependency-check-suppressions.xml
            --failOnCVSS 7
            --enableRetired
            --enableExperimental
            --prettyPrint
            --disableNodeAudit
            --disableNodeJS
            --disableRetireJS
            --disableYarnAudit
            --disablePnpmAudit

      # SARIFレポートの修正
      - name: Fix SARIF report
        run: |
          sed -i 's|file:///github/workspace/front/package.json?/|file:///github/workspace/front/package.json|g' ./dependency-check-report.sarif

      # スキャン結果をSARIF形式でアップロード
      - name: Upload dependency scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "./dependency-check-report.sarif"
          checkout_path: ${{ github.workspace }}
          category: "dependency-check"

  # コードの静的解析
  code-scanning:
    runs-on: ubuntu-latest
    # セキュリティイベントの書き込み権限を明示的に設定
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 完全な履歴を取得

      # Goのセットアップ
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          cache: true
          cache-dependency-path: back/go.sum
          check-latest: true

      # メモリ制限の設定
      - name: Set Go memory limit
        run: |
          echo "GOMEMLIMIT=2GiB" >> $GITHUB_ENV
          echo "GOGC=100" >> $GITHUB_ENV
          echo "GODEBUG=madvdontneed=1" >> $GITHUB_ENV

      # ビルド最適化
      - name: Configure build optimization
        run: |
          # 実験的な機能の設定
          echo "GOEXPERIMENT=noswissmap,nospinbitmutex" >> $GITHUB_ENV

          # ビルドデバッグ情報の設定
          echo "GODEBUG=buildvcs=1,buildjson=1,buildinfo=1,buildcache=1,buildtrace=1,buildstats=1,buildprofile=1,buildmem=1,buildtime=1,buildcpu=1,buildio=1,buildnet=1,buildrace=1,buildcoverage=1,buildtest=1,buildbench=1,buildvet=1,buildlink=1,buildasm=1,buildcgo=1,buildmod=1,buildpkg=1,buildwork=1,buildid=1,buildtag=1,buildtype=1,buildvar=1,gotestjsonbuildtext=1,toolchaintrace=1" >> $GITHUB_ENV

      # ビルド設定
      - name: Configure build settings
        run: |
          # 認証とバージョン管理の設定
          echo "GOAUTH=github" >> $GITHUB_ENV
          echo "GOVCS=git:all,hg:all" >> $GITHUB_ENV

          # セキュリティ設定
          echo "GOINSECURE=github.com/*" >> $GITHUB_ENV
          echo "GOPRIVATE=github.com/*" >> $GITHUB_ENV
          echo "GONOSUMDB=github.com/*" >> $GITHUB_ENV
          echo "GONOPROXY=github.com/*" >> $GITHUB_ENV

          # ツールチェーンとキャッシュ設定
          echo "GOTOOLCHAIN=local" >> $GITHUB_ENV
          echo "GOMODCACHEMODE=readonly" >> $GITHUB_ENV
          echo "GOCACHEMODE=readonly" >> $GITHUB_ENV

      # ビルドキャッシュの最適化
      - name: Configure build cache
        run: |
          # キャッシュディレクトリの設定
          echo "GOCACHE=$RUNNER_TEMP/go-cache" >> $GITHUB_ENV
          mkdir -p $RUNNER_TEMP/go-cache
          echo "GOMODCACHE=$RUNNER_TEMP/go-mod-cache" >> $GITHUB_ENV
          mkdir -p $RUNNER_TEMP/go-mod-cache
          echo "GOCACHEPROG=$RUNNER_TEMP/go-cache-prog" >> $GITHUB_ENV
          echo "GOBIN=$RUNNER_TEMP/go-bin" >> $GITHUB_ENV
          mkdir -p $RUNNER_TEMP/go-bin

          # キャッシュモードの設定
          echo "GOCACHEPROGMODE=readonly" >> $GITHUB_ENV

      # CodeQLの初期化と設定
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: "go,javascript,typescript"
          queries: security-extended,security-and-quality
          tools: linked
          config-file: ./.github/codeql/codeql-config.yml

      # ビルド環境の設定
      - name: Configure build environment
        run: |
          # キャッシュディレクトリの作成とパーミッション設定
          mkdir -p /tmp/go-cache
          mkdir -p /tmp/go-mod-cache
          mkdir -p /tmp/go-cache-prog
          chmod -R 777 /tmp/go-cache
          chmod -R 777 /tmp/go-mod-cache
          chmod -R 777 /tmp/go-cache-prog

          # 環境変数の設定
          echo "GOCACHE=/tmp/go-cache" >> $GITHUB_ENV
          echo "GOMODCACHE=/tmp/go-mod-cache" >> $GITHUB_ENV
          echo "GOCACHEPROG=/tmp/go-cache-prog" >> $GITHUB_ENV
          echo "GOTOOLCHAIN=local" >> $GITHUB_ENV
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOPROXY=direct" >> $GITHUB_ENV
          echo "GOSUMDB=off" >> $GITHUB_ENV
          echo "GOENV=off" >> $GITHUB_ENV
          echo "GODEBUG=buildvcs=0" >> $GITHUB_ENV

      # 依存関係のインストール
      - name: Install dependencies
        run: |
          cd back
          go mod download
          go mod tidy

      # 自動ビルドの実行
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        env:
          GOCACHE: /tmp/go-cache
          GOMODCACHE: /tmp/go-mod-cache
          GOCACHEPROG: /tmp/go-cache-prog
          GOTOOLCHAIN: local
          GO111MODULE: on
          GOPROXY: direct
          GOSUMDB: off
          GOENV: off
          GODEBUG: buildvcs=0

      # CodeQL分析の実行
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "code-scanning"
          upload: true

  # シークレットの漏洩チェック
  secret-scanning:
    runs-on: ubuntu-latest
    # セキュリティイベントの書き込み権限を明示的に設定
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 完全な履歴を取得

      # Gitleaksを使用してシークレットの漏洩をチェック
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml
          GITLEAKS_REDACT: "true"
          GITLEAKS_VERBOSE: "true"
          GITLEAKS_NO_GIT: "false"
