name: Test Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      - id: cache-key
        run: echo "value=$(date +%s)" >> $GITHUB_OUTPUT

  test:
    needs: setup
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        test-type: [unit, integration, e2e, performance]
        platform: [ubuntu-latest, macos-latest]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.24.1"
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-
      - name: Run tests
        run: |
          cd back
          go mod download
          cd tests/${{ matrix.test-type }}
          go test -v -race -coverprofile=coverage.out ./...
      - uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-type }}-${{ matrix.platform }}
          path: back/tests/${{ matrix.test-type }}/coverage.out

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.24.1"
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-lint-
      - name: Run linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          cd back
          golangci-lint run --timeout=5m

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: Process coverage
        run: |
          echo "mode: atomic" > coverage.txt
          for f in coverage-*/*; do
            tail -n +2 $f >> coverage.txt
          done
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
