name: Test Pipeline

# トリガー設定
# mainブランチへのプッシュとプルリクエスト時に実行
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# 並行性制御の設定
# 同じブランチやプルリクエストでの同時実行を防ぐ
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 必要な権限を明示的に設定
permissions:
  contents: read
  security-events: write

# 環境変数の設定
env:
  GO_VERSION: "1.24.2"
  GOLANGCI_LINT_VERSION: "v1.64.8"
  POSTGRES_VERSION: "latest"

jobs:
  # キャッシュキーの生成
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - id: cache-key
        run: echo "value=$(git rev-parse --short HEAD)-$(date +%Y%m%d)" >> $GITHUB_OUTPUT

  # フロントエンドのテスト
  frontend-test:
    needs: setup
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install dependencies
        run: |
          cd front
          pnpm install
      - name: Generate .env.test file
        run: |
          cd front
          cp .env.test.example .env.test
      - name: Run frontend tests
        run: |
          cd front
          NODE_ENV=test pnpm test

  # 各種テストの実行
  test:
    needs: setup
    runs-on: ${{ matrix.platform }}
    # テストジョブの並行性制御
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-test
      cancel-in-progress: true
    # テスト戦略の設定
    strategy:
      matrix:
        # テストタイプ: ユニットテスト、統合テスト、E2Eテスト、パフォーマンステスト
        test-type: [unit, integration, e2e, performance]
        # プラットフォーム: UbuntuとmacOS
        platform: [ubuntu-latest, macos-latest]
        # 除外設定: パフォーマンステストとE2EテストはmacOSでは実行しない
        exclude:
          - test-type: performance
            platform: macos-latest
          - test-type: e2e
            platform: macos-latest
      fail-fast: true # 1つのジョブが失敗したら他のジョブをキャンセル
      max-parallel: 2 # 同時実行数の制限
    timeout-minutes: 30 # ジョブのタイムアウト設定
    continue-on-error: false # エラー時に続行しない
    # PostgreSQLサービスの設定
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      # Goのセットアップ
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: back/go.sum
          check-latest: true
          go-version-file: back/go.mod
      # Goモジュールのキャッシュ設定
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-
            ${{ runner.os }}-
          enableCrossOsArchive: true
          upload-chunk-size: 32MB
      # テストの実行
      - name: Run tests
        run: |
          cd back
          go mod download
          cd tests/${{ matrix.test-type }}
          go test -v -race -coverprofile=coverage.out ./...
      # カバレッジレポートのアップロード
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-type }}-${{ matrix.platform }}
          path: back/tests/${{ matrix.test-type }}/coverage.out

  # リンターの実行
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      # Goのセットアップ
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: back/go.sum
          check-latest: true
          go-version-file: back/go.mod
      # Goモジュールのキャッシュ設定
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-lint-
            ${{ runner.os }}-
          enableCrossOsArchive: true
          upload-chunk-size: 32MB
      # golangci-lintの実行
      - name: Run linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}
          cd back
          golangci-lint run --timeout=5m

  # カバレッジレポートの集計とアップロード
  coverage:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      # カバレッジレポートの統合
      - name: Process coverage
        run: |
          echo "mode: atomic" > coverage.txt
          for f in coverage-*/*; do
            tail -n +2 $f >> coverage.txt
          done
      # Codecovへのアップロード
      - uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
