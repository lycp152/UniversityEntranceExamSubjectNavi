package unit

import (
	"testing"
	"time"

	"university-exam-api/tests/testutils"
	"university-exam-api/tests/unit/models"
	"university-exam-api/tests/unit/repositories"
)

// TestVulnerability は脆弱性スキャンのテストケースです
func TestVulnerability(t *testing.T) {
	db := testutils.NewMockDB()
	defer func() {
		if err := db.Close(); err != nil {
			t.Errorf("データベースのクローズに失敗しました: %v", err)
		}
	}()

	repo := repositories.NewUserRepository(db)

	// SQLインジェクションのテスト
	t.Run("SQLインジェクション", func(t *testing.T) {
		user := &models.User{
			Name:     testUserName + "'; DROP TABLE users; --",
			Email:    testUserEmail,
			Password: testUserPassword,
		}

		err := repo.Create(user)
		if err == nil {
			t.Errorf("SQLインジェクションが検出されませんでした")
		}
	})

	// XSSのテスト
	t.Run("XSS", func(t *testing.T) {
		user := &models.User{
			Name:     "<script>alert('XSS')</script>",
			Email:    testUserEmail,
			Password: testUserPassword,
		}

		err := repo.Create(user)
		if err == nil {
			t.Errorf("XSSが検出されませんでした")
		}
	})

	// タイミング攻撃のテスト
	t.Run("タイミング攻撃", func(t *testing.T) {
		user := &models.User{
			Name:     testUserName,
			Email:    testUserEmail,
			Password: testUserPassword,
		}

		start := time.Now()
		err := repo.Create(user)
		duration := time.Since(start)

		if duration > 100*time.Millisecond {
			t.Errorf("タイミング攻撃の可能性があります: %v", duration)
		}

		if err != nil {
			t.Errorf("ユーザーの作成に失敗しました: %v", err)
		}
	})
}

// TestInputValidation は入力検証のテストケースです
func TestInputValidation(t *testing.T) {
	db := testutils.NewMockDB()
	defer func() {
		if err := db.Close(); err != nil {
			t.Errorf("データベースのクローズに失敗しました: %v", err)
		}
	}()

	repo := repositories.NewUserRepository(db)

	tests := []struct {
		name    string
		user    models.User
		wantErr bool
	}{
		{
			name: "空のユーザー名",
			user: models.User{
				Name:     "",
				Email:    testUserEmail,
				Password: testUserPassword,
			},
			wantErr: true,
		},
		{
			name: "無効なメールアドレス",
			user: models.User{
				Name:     testUserName,
				Email:    "invalid-email",
				Password: testUserPassword,
			},
			wantErr: true,
		},
		{
			name: "短すぎるパスワード",
			user: models.User{
				Name:     testUserName,
				Email:    testUserEmail,
				Password: "pass",
			},
			wantErr: true,
		},
		{
			name: "特殊文字を含むユーザー名",
			user: models.User{
				Name:     testUserName + "!@#$%^&*()",
				Email:    testUserEmail,
				Password: testUserPassword,
			},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := repo.Create(&tt.user)
			if tt.wantErr {
				if err == nil {
					t.Errorf("エラーが期待されましたが、発生しませんでした")
				}
			} else {
				if err != nil {
					t.Errorf("予期しないエラーが発生しました: %v", err)
				}
			}
		})
	}
}
