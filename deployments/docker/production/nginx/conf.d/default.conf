# バックエンドサーバーの定義
# Go言語で実装されたRESTful APIサーバーへの接続設定
upstream backend {
    server backend:8080;
}

# フロントエンドサーバーの定義
# Next.jsで実装されたSPAアプリケーションへの接続設定
upstream frontend {
    server frontend:3000;
}

# HTTPリクエストをHTTPSにリダイレクト
# セキュアな通信を強制するための設定
server {
    listen 80;
    server_name localhost;

    # リダイレクト設定
    location / {
        return 301 https://$host$request_uri;
    }
}

# メインのHTTPSサーバー設定
# SSL/TLS暗号化とセキュリティヘッダーの設定
server {
    listen 443 ssl;
    server_name localhost;

    # SSL設定
    # 最新のTLSプロトコルと強力な暗号スイートを使用
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # セキュリティヘッダー
    # XSS、クリックジャッキング、MIMEタイプスニッフィング対策
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # フロントエンドのプロキシ設定
    # Next.jsアプリケーションへのリクエスト転送
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # バックエンドAPIのプロキシ設定
    # Go言語APIサーバーへのリクエスト転送
    location /api {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS設定
        # クロスオリジンリクエストの制御
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # OPTIONSリクエストの処理
        # プリフライトリクエストへの応答
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # ヘルスチェックエンドポイント
    # コンテナの健全性確認用
    location /health {
        access_log off;
        return 200 'healthy\n';
    }

    # エラーページの設定
    # カスタムエラーページの提供
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
