version: "3.8"

services:
  frontend:
    build:
      context: ../../front
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: always
    depends_on:
      - backend
    networks:
      - app_network

  backend:
    build:
      context: ../../back
      dockerfile: Dockerfile.prod
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=production
    restart: always
    depends_on:
      - db
      - redis
    networks:
      - app_network

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    restart: always
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: always
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../nginx/conf.d:/etc/nginx/conf.d
      - ../../nginx/ssl:/etc/nginx/ssl
      - ../../nginx/www:/var/www
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
